.gallery {
  background-color: $color-grey-light-1;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  /* We use vw as reference because it's better to reduce relative to the viewport. */
  grid-template-rows: repeat(7, 5vw);
  gap: 1.5rem;
  padding: 1.5rem;

  /* We use this parent element to wrap img element because we want to use object-fit property. */
  &__item {

    &--1 {grid-area: 1/1/3/3;}
    &--2 {grid-area: 1/3/4/6;}
    &--3 {grid-area: 1/6/3/7;}
    &--4 {grid-area: 1/7/3/9;}
    &--5 {grid-area: 3/1/6/3;}
    &--6 {grid-area: 4/3/6/5;}
    &--7 {grid-area: 4/5/5/6;}
    &--8 {grid-area: 3/6/5/8;}
    &--9 {grid-area: 3/8/6/9;}
    &--10 {grid-area: 6/1/8/2;}
    &--11 {grid-area: 6/2/8/4;}
    &--12 {grid-area: 6/4/8/5;}
    &--13 {grid-area: 5/5/8/8;}
    &--14 {grid-area: 6/8/8/9;}
  }

  &__img {
    /* MUST explicitly set width & height values when using object-fit.
    If we don't use object-fit but only setting width & height to 100%, it will fit, but loses its aspect ratio.*/
    object-fit: cover;
    width: 100%;
    height: 100%;
    /* We have to set block because image is treated as inline element. If not, it will leave tiny white space at the bottom of its parent element. */
    display: block;
  }
}

/* ########################## Regarding media query ######################### */

/* Reply from teaching assistant:

I would choose to forgo displaying the gallery entirely on mobile devices (unless you're using the gallery for practical purposes such as linking to another page / displaying important information).  If you wanted to display the images, I would display the images in a single column on mobile devices, then, at a particular breakpoint, apply the appropriate grid styling to display the gallery in all its beauty. */